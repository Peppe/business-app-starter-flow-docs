---
title: Application Structure
order: 1
layout: page
---

== Application Structure
The structure consists of several slots designed to help implement any desired layout.

image::images/structure.png[]

=== Header and Footer Slots
These slots are intended for application wide elements such as main navigation, actions and branding. When using both the outer and inner elements, make sure the content hierarchy is clear, and that they don't take up too much vertical space.

=== Navigation Slot
The navigation slot is reserved for the `NaviDrawer`. This component comes with a few neat features built-in:

* It can be collapsed to maximise the screen space for the inner header, view and inner footer slots.
* Hidden by default on viewports narrower than 1024px. Accessible via the application header's menu icon.
* Searchable and hierarchical navigation items.

The `NaviDrawer` consists of:

* A header intended for branding and/or account switching purposes.
* Scrollable list of navigation items.
* A footer that by default houses the collapse button.

==== Navigation Modes
The application supports two different navigation modes:

* *Traditional*: clicking a link changes the current view.
* *Tabbed*: users can open and close tabs. Clicking a link changes the content of the current tab.

=== View Slot
Top-level views should be placed in the view slot. This is accomplished by setting your view's `@Route` `layout` parameter to `MainLayout.class`:

[source,java]
----
@Route(value = "statistics", layout = MainLayout.class)
@PageTitle("Statistics")
public class Statistics extends ViewFrame {
----

==== ViewFrame & SplitViewFrame
All of the Business App Starter's views extend either `ViewFrame` or `SplitViewFrame`. These classes simplify the process of creating views with a header, scrollable content and footer. `SplitViewFrame` does the same with an additional details slot, useful when creating master-details view.

All of the slots in `ViewFrame` and `SplitViewFrame` are optional.

* A view's *header slot* can be used for titles & identifiers, view specific actions, secondary navigation etc.
* The main content of a view should be placed in the *content slot*. This slot should take up the most screen estate, while the other slots contain supportive elements.
* The *footer slot* can be used for view actions, summary data, selection info etc.

`ViewFrame` and `SplitViewFrame` can be customised or extended to house more slots.

=== Layout Examples
Hereâ€™s a few examples of common layouts used in business applications.

image::images/layout-01.png[]

Very common layout where the outer header is the most prominent element. The view uses a view header to show the view title.

Used slots:

* Header (outer)
* Navigation drawer
* View with header

***

image::images/layout-02.png[]

This layout puts more focus on the sidebar navigation. Suitable for complex hierarchical navigation structures. View area has footer that includes action buttons.

Used slots:

* Header (inner)
* Navigation drawer
* View with footer

***

image::images/layout-03.png[]

The navigation is placed in the outer header. The view area is maximised but the navigation has to be simple. The view's sidebar is used to display additional details.

Used slots:

* Header (outer)
* View with sidebar

== Custom Components

=== Closable Tabs
An additional feature to `Tabs` that allows discarding tabs. Used in tabbed navigation mode.

=== List Item
List item is used to display an entity in formatted manner. Most common use is to display an icon together with a caption and value. There are few built-in options to alter the appearance.

=== FlexBoxLayout
`FlexBoxLayout` is a server-side implementation of link:https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout[CSS Flexible Box Layout]. It extends `FlexLayout` and contains convenience methods for setting `background-color`, `flex`, `flex-basis`, `flex-direction`, `flex-shrink`, `flex-wrap`, `margin`, `overflow`, `padding`, `shadow`, `spacing` and `theme`.

NOTE: Please remember that all custom components that ship with the Business App Starter can and should be customised to suit your business needs and requirements.

== Theming
The Business App Starter uses the Lumo theme which is the main theme for all Vaadin web components. Lumo uses CSS custom properties to control color values, margin sizes and typography for example. Almost any visual style can be achieved just by tweaking the predefined CSS custom properties. For the more advanced modifications Vaadin introduces `ThemableMixin` which allows separately theming the Shadow DOM parts of each component.

[%hardbreaks]
Full Lumo documentation:
https://vaadin.com/themes/lumo

[%hardbreaks]
`ThemableMixin` documentation:
https://github.com/vaadin/vaadin-themable-mixin/wiki

=== Theme properties
Lumo defines a set of CSS custom properties you can use to apply consistent visual styles across your application. The Business App Starter enables you to apply these on the server-side. For example, to apply a medium size bottom margin:

[source,java]
----
component.addClassName(LumoStyles.Margin.Bottom.M);
----

==== Typography
[%hardbreaks]
Lumo styles:
https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/typography.html

|===
|Property|Values

|`FontFamily`
|`MONOSPACE`

|`FontSize`
|`XXS`, `XS`, `S`, `M` (default), `L`, `XL`, `XXL`, `XXXL`

|`FontWeight`
|`BOLD`, `BOLDER`, `LIGHTER`, `NORMAL`, `_100`, `_200`, `_300`, `_400`, `_500`, `_600`, `_700`, `_800`, `_900`

|`Header`
|`H1`, `H2`, `H3`, `H4`, `H5`, `H6`

|`IconSize`
|`S`, `M`, `L`

|`TextColor`
|`HEADER`, `BODY`, `SECONDARY`, `TERTIARY`, `DISABLED`, `PRIMARY`, `PRIMARY_CONTRAST`, `ERROR`, `ERROR_CONTRAST`, `SUCCESS`, `SUCCESS_CONTRAST`
|===

<example>

==== Colors
Lumo styles: https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/colors.html

|===
|Color|Values

|`Base`
|`BASE_COLOR`

|`Primary`
|`_10`, `_50`, `_100`

|`Error`
|`_10`, `_50`, `_100`

|`Success`
|`_10`, `_50`, `_100`

|`Tint`
|`_5`, `_10`, `_20`, `_30`, `_40`, `_50`, `_60`, `_70`, `_80`, `_90`, `_100`

|`Shade`
|`_5`, `_10`, `_20`, `_30`, `_40`, `_50`, `_60`, `_70`, `_80`, `_90`, `_100`

|`Contrast`
|`_5`, `_10`, `_20`, `_30`, `_40`, `_50`, `_60`, `_70`, `_80`, `_90`, `_100`
|===

<example>

==== Style
Lumo styles: https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/styles.html

|===
|Color|Values

|`BorderRadius`
|`S`, `M`, `L`, `_50`

|`BoxShadowBorders`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`

|`Shadow`
|`S`, `M`, `L`, `XL`
|===

<example>

==== Sizing and Spacing
Lumo styles: https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/sizing-and-spacing.html

|===
|Property|Size|Direction

|`Margin`
|`XS`, `S`, `M` (default), `L`, `XL`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`, `HORIZONTAL`, `VERTICAL`, `TALL`, `UNIFORM` (default), `WIDE`

|`Padding`
|`XS`, `S`, `M` (default), `L`, `XL`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`, `HORIZONTAL`, `VERTICAL`, `TALL`, `UNIFORM` (default), `WIDE`

|`Spacing`
|`XS`, `S`, `M` (default), `L`, `XL`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`, `HORIZONTAL`, `VERTICAL`, `TALL`, `UNIFORM` (default), `WIDE`
|===

<example>

=== Utility Classes
RAT introduces number of utility classes to ease applying consistent styling and improve efficiency when initialising the most commonly needed UI elements.

==== Example
[source,java]
----
Label title = UIUtils.createH2Label("Title");
----

This will output an `<label>` element that already has suitable style name in place.

==== Buttons
Most commonly used button variations can be produced with `UIUtils`. The methods accept `String` and/or `VaadinIcon`.

|===
|Variant|Method

|Primary
|`createPrimaryButton`

|Tertiary
|`createTertiaryButton`, `createTertiaryInlineButton`

|Success
|`createSuccessButton`, `createSuccessPrimaryButton`

|Error
|`createErrorButton`, `createErrorPrimaryButton`

|Contrast
|`createContrastButton`, `createContrastPrimaryButton`

|Size
|`createSmallButton`, `createLargeButton`
|===

If other variations or combinations are needed use `createButton(ButtonVariant...)`.

[source,java]
----
// Primary button, text only.
UIUtils.createPrimaryButton("Primary");

// Success button, icon only.
UIUtils.createSuccessButton(VaadinIcon.CHECK);

// Error button, text and icon.
UIUtils.createErrorButton("Error", VaadinIcon.WARNING);

// Small tertiary button, text and icon.
UIUtils.createButton("Tertiary Small", VaadinIcon.HOME, ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
----

==== Labels

|===
|Type|Method

|Size & color
|`createLabel(FontSize, TextColor, String)`

|Size
|`createLabel(FontSize, String)`

|Colors
|`createLabel(TextColor, String)`

|Headings
|`createH1Label(String)`, `createH2Label(String)`, `createH3Label(String)`, `createH4Label(String)`, `createH5Label(String)`, `createH6Label(String)`
|===

==== Misc
|===
|Method|Description

|`createInitials`
|Creates circular element with centered initials.

|`createFloatingActionButton`
|Initialises an action button that appears in bottom right corner of the view. Most commonly used to trigger main action on view.
|===

==== Form Layout
|===
|Method|Description

|`setFormLayoutColSpan`
|Defines the column span elements in a FormLayout.
|===

==== Numbers
|===
|Method|Description

|`formatAmount`
|Formats a decimal amount for improved legibility.

|`createAmountLabel`
|Initialises a monospaced H5 label for improved legibility of decimal values.

|`formatUnits`
|Formats an integer amount for improved legibility.

|`createUnitsLabel`
|Initialises a monospaced H5 label for improved legibility of integer values.
|===

==== Icons
|===
|Variant|Method

|Primary
|`createPrimaryIcon`

|Secondary
|`createSecondaryIcon`

|Tertiary
|`createTertiaryIcon`

|Disabled
|`createDisabledIcon`

|Success
|`createSuccessIcon`

|Error
|`createErrorIcon`

|Small
|`createSmallIcon`

|Large
|`createLargeIcon`
|===

If other variations or combinations are needed use `createIcon(IconSize, TextColor, VaadinIcon)`.

==== Dates
|===
|Method|Description

|`formatDate`
|Formats a `LocalDate` according to the format defined in `UIUtils`.
|===

=== Customise the Utility Classes
It is advised to create or modify the utility classes according to your needs. Create custom components and utility methods for reoccurring UI patterns. Doing this will make the code easier to maintain and more consistent.
