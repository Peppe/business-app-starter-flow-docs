---
title: Application Structure
order: 1
layout: page
---

= Business App Starter

A starter for building responsive business web apps. It contains a collection of components, view templates, theming utilities and best practises that can help teams save more than a week of development time at the start of a new project.

== Features
* Application header with avatar & tab support
* Customisable styles
* Installable on desktop & mobile
* Responsive navigation sidebar
* Templates for CRUD, dashboard & drilldown views
* 100% Java-based templates

image::images/overview-1.png[]

== Structure
The Business App Starter's structure is comprised of several slots designed to help implement any layout.

image::images/structure.png[]

=== Header & Footer Slots
These slots are intended for application-wide navigation, actions and branding. When using both the outer and inner elements, ensure the content hierarchy is clear and that they don't take up too much vertical space.

=== Navigation Slot
The navigation slot is reserved for the `NaviDrawer`: a responsive and collapsible navigation sidebar that houses searchable and hierarchical navigation items. It consists of a header intended for branding & account switching, a scrollable list of navigation items, and a footer which by default houses the collapse button.

==== Navigation Modes
The application supports two different navigation modes:

* *Traditional*: clicking a link changes the current view.
* *Tabbed*: a browser-esque experience where users can open and close tabs. Clicking a link changes the content of the current tab.

=== View Slot
The intended slot for views. Place views in this slot by setting the `@Route` annotation's `layout` parameter to `MainLayout.class`.

[source,java]
----
@Route(value = "my-view", layout = MainLayout.class)
@PageTitle("My View")
public class MyView extends ViewFrame {
----

==== ViewFrame & SplitViewFrame
All of the Business App Starter's views extend either `ViewFrame` or `SplitViewFrame`. They simplify the process of creating views that contain a header, scrollable content and footer. `SplitViewFrame` houses an additional details slot for creating master-detail views.

=== Layout Examples
Here are a few examples of common layouts used in business applications.

image::images/layout-01.png[]

An often-used composition where the outer header is the most prominent element. The view itself sports a header for showing the title.

Used slots:

* Header (outer)
* Navigation drawer
* View with header

***

image::images/layout-02.png[]

This layout puts more focus on the navigation drawer. Suitable for complex hierarchical navigation structures. The view footer houses view-specific actions.

Used slots:

* Navigation drawer
* Header (inner)
* View with footer

***

image::images/layout-03.png[]

The navigation is placed in the outer header. The view area is maximised but the navigation has to be simple. The view's sidebar is used to display additional details.

Used slots:

* Header (outer)
* View with sidebar

== Custom Components

The Business App Starter comes with the following custom components:

* AppBar & TabBar
* Badge
* DetailsDrawer
* FlexBoxLayout
* ListItem
* NaviDrawer
* NaviTabs (closable)

=== AppBar & TabBar
`AppBar` consists of a main menu icon, contextual navigation icon, title, tabs, action items and avatar. All building blocks are optional.

.AppBar with a main menu icon, title, tabs and avatar.
image::images/app-bar.png[AppBar with a main menu icon, title, tabs and avatar.]

`TabBar` is a simpler version of `AppBar` that discards the contextual navigation icon and title.

=== Badge
Server-side component for link:https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/badges.html[Lumo badges].

=== FlexBoxLayout
`FlexBoxLayout` is a server-side implementation of link:https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout[CSS Flexible Box Layout]. It extends `FlexLayout` and contains convenience methods for setting `flex`, `flex-basis`, `flex-direction`, `flex-shrink` and `flex-wrap`. It also supports setting `background-color`, `margin`, `overflow`, `padding`, `shadow`, `spacing` and `theme`.

NOTE: Please remember that all custom components that ship with the Business App Starter can and should be customised to suit your business needs and requirements.

== Theming
The Business App Starter uses the Lumo theme which is the main theme for all Vaadin web components. Lumo uses CSS custom properties to control color values, margin sizes and typography for example. Almost any visual style can be achieved just by tweaking the predefined CSS custom properties. For the more advanced modifications Vaadin introduces `ThemableMixin` which allows separately theming the Shadow DOM parts of each component.

[%hardbreaks]
Full Lumo documentation:
https://vaadin.com/themes/lumo

[%hardbreaks]
`ThemableMixin` documentation:
https://github.com/vaadin/vaadin-themable-mixin/wiki

=== Theme properties
Lumo defines a set of CSS custom properties you can use to apply consistent visual styles across your application. The Business App Starter enables you to apply these on the server-side. For example, to apply a medium size bottom margin:

[source,java]
----
component.addClassName(LumoStyles.Margin.Bottom.M);
----

==== Typography
[%hardbreaks]
Lumo styles:
https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/typography.html

|===
|Property|Values

|`FontFamily`
|`MONOSPACE`

|`FontSize`
|`XXS`, `XS`, `S`, `M` (default), `L`, `XL`, `XXL`, `XXXL`

|`FontWeight`
|`BOLD`, `BOLDER`, `LIGHTER`, `NORMAL`, `_100`, `_200`, `_300`, `_400`, `_500`, `_600`, `_700`, `_800`, `_900`

|`Header`
|`H1`, `H2`, `H3`, `H4`, `H5`, `H6`

|`IconSize`
|`S`, `M`, `L`

|`TextColor`
|`HEADER`, `BODY`, `SECONDARY`, `TERTIARY`, `DISABLED`, `PRIMARY`, `PRIMARY_CONTRAST`, `ERROR`, `ERROR_CONTRAST`, `SUCCESS`, `SUCCESS_CONTRAST`
|===

<example>

==== Colors
Lumo styles: https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/colors.html

|===
|Color|Values

|`Base`
|`BASE_COLOR`

|`Primary`
|`_10`, `_50`, `_100`

|`Error`
|`_10`, `_50`, `_100`

|`Success`
|`_10`, `_50`, `_100`

|`Tint`
|`_5`, `_10`, `_20`, `_30`, `_40`, `_50`, `_60`, `_70`, `_80`, `_90`, `_100`

|`Shade`
|`_5`, `_10`, `_20`, `_30`, `_40`, `_50`, `_60`, `_70`, `_80`, `_90`, `_100`

|`Contrast`
|`_5`, `_10`, `_20`, `_30`, `_40`, `_50`, `_60`, `_70`, `_80`, `_90`, `_100`
|===

<example>

==== Style
Lumo styles: https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/styles.html

|===
|Color|Values

|`BorderRadius`
|`S`, `M`, `L`, `_50`

|`BoxShadowBorders`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`

|`Shadow`
|`S`, `M`, `L`, `XL`
|===

<example>

==== Sizing and Spacing
Lumo styles: https://cdn.vaadin.com/vaadin-lumo-styles/1.4.2/demo/sizing-and-spacing.html

|===
|Property|Size|Direction

|`Margin`
|`XS`, `S`, `M` (default), `L`, `XL`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`, `HORIZONTAL`, `VERTICAL`, `TALL`, `UNIFORM` (default), `WIDE`

|`Padding`
|`XS`, `S`, `M` (default), `L`, `XL`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`, `HORIZONTAL`, `VERTICAL`, `TALL`, `UNIFORM` (default), `WIDE`

|`Spacing`
|`XS`, `S`, `M` (default), `L`, `XL`
|`BOTTOM`, `LEFT`, `RIGHT`, `TOP`, `HORIZONTAL`, `VERTICAL`, `TALL`, `UNIFORM` (default), `WIDE`
|===

<example>

=== Utility Classes
RAT introduces number of utility classes to ease applying consistent styling and improve efficiency when initialising the most commonly needed UI elements.

==== Example
[source,java]
----
Label title = UIUtils.createH2Label("Title");
----

This will output an `<label>` element that already has suitable style name in place.

==== Buttons
Most commonly used button variations can be produced with `UIUtils`. The methods accept `String` and/or `VaadinIcon`.

|===
|Variant|Method

|Primary
|`createPrimaryButton`

|Tertiary
|`createTertiaryButton`, `createTertiaryInlineButton`

|Success
|`createSuccessButton`, `createSuccessPrimaryButton`

|Error
|`createErrorButton`, `createErrorPrimaryButton`

|Contrast
|`createContrastButton`, `createContrastPrimaryButton`

|Size
|`createSmallButton`, `createLargeButton`
|===

If other variations or combinations are needed use `createButton(ButtonVariant...)`.

[source,java]
----
// Primary button, text only.
UIUtils.createPrimaryButton("Primary");

// Success button, icon only.
UIUtils.createSuccessButton(VaadinIcon.CHECK);

// Error button, text and icon.
UIUtils.createErrorButton("Error", VaadinIcon.WARNING);

// Small tertiary button, text and icon.
UIUtils.createButton("Tertiary Small", VaadinIcon.HOME, ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
----

==== Labels

|===
|Type|Method

|Size & color
|`createLabel(FontSize, TextColor, String)`

|Size
|`createLabel(FontSize, String)`

|Colors
|`createLabel(TextColor, String)`

|Headings
|`createH1Label(String)`, `createH2Label(String)`, `createH3Label(String)`, `createH4Label(String)`, `createH5Label(String)`, `createH6Label(String)`
|===

==== Misc
|===
|Method|Description

|`createInitials`
|Creates circular element with centered initials.

|`createFloatingActionButton`
|Initialises an action button that appears in bottom right corner of the view. Most commonly used to trigger main action on view.
|===

==== Form Layout
|===
|Method|Description

|`setFormLayoutColSpan`
|Defines the column span elements in a FormLayout.
|===

==== Numbers
|===
|Method|Description

|`formatAmount`
|Formats a decimal amount for improved legibility.

|`createAmountLabel`
|Initialises a monospaced H5 label for improved legibility of decimal values.

|`formatUnits`
|Formats an integer amount for improved legibility.

|`createUnitsLabel`
|Initialises a monospaced H5 label for improved legibility of integer values.
|===

==== Icons
|===
|Variant|Method

|Primary
|`createPrimaryIcon`

|Secondary
|`createSecondaryIcon`

|Tertiary
|`createTertiaryIcon`

|Disabled
|`createDisabledIcon`

|Success
|`createSuccessIcon`

|Error
|`createErrorIcon`

|Small
|`createSmallIcon`

|Large
|`createLargeIcon`
|===

If other variations or combinations are needed use `createIcon(IconSize, TextColor, VaadinIcon)`.

==== Dates
|===
|Method|Description

|`formatDate`
|Formats a `LocalDate` according to the format defined in `UIUtils`.
|===

=== Customise the Utility Classes
It is advised to create and modify the utility classes according to your needs. Creating custom components and utility methods for reoccurring UI patterns will make the code more consistent and easier to maintain.
